Node lar birbiriyleriyle anlaşırken servis kullandığında, istek gönderen node client node;
cevaplayan node ise service node üzerinden verilir.Request ve response  ların yapısı .srv  dosyası tarafından belirlenir.

Src yi açtıktan sonra bu komutu çalıştırıp paketi indir:
ros2 pkg create --build-type ament_python py_srvcli --dependencies rclpy example_interfaces

--dependencies argümanı otomatik olarak gerkekli bağımlı dosyaları package.xml e ekler.
example_interface .srv file da request  ve responseları barındıran bir pakettir.


Her zaman,package .xml dosyasında
<description>Python client server tutorial</description>
<maintainer email="you@email.com">Your Name</maintainer>
<license>Apache License 2.0</license> 
 bunları değiştirmeyi unutma.

Aynı biligileri setup.py dosyasında da eklemeyi unutma!
Şu kısımlarda:
maintainer='Your Name',
maintainer_email='you@email.com',
description='Python client server tutorial',
license='Apache License 2.0',

ros2_ws/src/py_srvcli/py_srvcli bu dizine gidip  ,service_member_function.py bu dosyayı oluştur ve aşağıdaki kodları dosyaya yapıştır.


from example_interfaces.srv import AddTwoInts

import rclpy
from rclpy.node import Node


class MinimalService(Node):

    def __init__(self):
        super().__init__('minimal_service')
        self.srv = self.create_service(AddTwoInts, 'add_two_ints', self.add_two_ints_callback)

    def add_two_ints_callback(self, request, response):
        response.sum = request.a + request.b
        self.get_logger().info('Incoming request\na: %d b: %d' % (request.a, request.b))

        return response


def main():
    rclpy.init()

    minimal_service = MinimalService()

    rclpy.spin(minimal_service)

    rclpy.shutdown()


if __name__ == '__main__':
    main()


Kodu detaylı incelersek,import ifadesi examle_interface paketinin içinden AddTwoInts servsini koda dahil eder.
Ardındaki import ise ROS2 client libraryden spesifik olarak Node classını koda dahil eder.

MinimalService sınıfının Constructor ‘ı minimal_service adlı bir node oluşturur.Sonra,bir servis oluşturarak tipini,ismini be geri dönüşünü tanımlar.
Son olarak,main sınıfı ROS2 Python kütüphanesini başlatır.Servis düğümü oluşturmak için MinimalService sınıfını başlatır ve geri dönüşleri döndürmek için node u geri döndürür.

Client Node oluşturma:

ros2_ws/src/py_srvcli/py_srvcli dizininin içinde client_member_function.py dosyası oluştur.Şu kodu yapıştır:

import sys

from example_interfaces.srv import AddTwoInts
import rclpy
from rclpy.node import Node


class MinimalClientAsync(Node):

    def __init__(self):
        super().__init__('minimal_client_async')
        self.cli = self.create_client(AddTwoInts, 'add_two_ints')
        while not self.cli.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('service not available, waiting again...')
        self.req = AddTwoInts.Request()

    def send_request(self, a, b):
        self.req.a = a
        self.req.b = b
        self.future = self.cli.call_async(self.req)
        rclpy.spin_until_future_complete(self, self.future)
        return self.future.result()


def main():
    rclpy.init()

    minimal_client = MinimalClientAsync()
    response = minimal_client.send_request(int(sys.argv[1]), int(sys.argv[2]))
    minimal_client.get_logger().info(
        'Result of add_two_ints: for %d + %d = %d' %
        (int(sys.argv[1]), int(sys.argv[2]), response.sum))

    minimal_client.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()


MinimalClientAsync sınıfının constructor ı minimal_client_async node unun çalışmasını sağlar.
Constructor un amacı sercive node u ile aynı isimde bir client node oluşmasını sağlar.While loop u ise (constructor içindeki) servisin tipi ve client tipinin ve isminin aynı olup olmasını saniyede 1 kontrol eder.Ve sonunda AddTwoInts  request objesini oluşturur.

send_request metodu ise request gönderecek ve yanıtı alana veya başarısız olana kadar döner.

Note:main metod sends the request using the passed-in command-line arguments, and logs the results.

Service node da olduğu gibi,client node u çalıştırabilmek için entry_points kısmına(setup.py) bunları ekle:
entry_points={
    'console_scripts': [
        'service = py_srvcli.service_member_function:main',
        'client = py_srvcli.client_member_function:main',
    ],
},

Ve son olarak programı çalıştırmaj için eksiklik olmaması için root directory de  şu komutu çalıştır:
rosdep install -i --from-path src --rosdistro iron -y

sonra paketi indirmek için bu komutu kullan:
colcon build --packages-select py_srvcli

Sonra sourcela:
source install/setup.bash

Son olarak bir tane client node için bir terminal açıp şu komutu yaz:
ros2 run py_srvcli client 2 3

Ve başka bir terminalde service node çalıştırmak için:
ros2 run py_srvcli service
